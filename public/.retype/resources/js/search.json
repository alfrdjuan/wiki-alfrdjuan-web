[[{"l":"Welcome"}],[{"l":"About"}],[{"i":"quiz-what-is-software-testing","l":"Quiz: what is software testing?"}],[{"l":"What is software testing","p":["This is a paragraph."]}],[{"i":"1-testing-shows-the-presence-not-the-absence-of-defects","l":"#1 Testing shows the presence, not the absence of defects"},{"l":"Definition","p":["Definition of this by multiple sources:","Testing can show that defects are present in the test object, but cannot prove that there are no defects (Buxton 1970). Testing reduces the probability of defects remaining undiscovered in the test object, but even if no defects are found, testing cannot prove test object correctness."]}],[{"i":"5-test-wear-out","l":"#5 Test wear out"},{"i":"definition-by-multiple-sources","l":"Definition by multiple sources:","p":["If the same tests are repeated many times, they become increasingly ineffective in detecting new defects(Beizer 1990). To overcome this effect, existing tests and test data may need to be modified, and new tests may need to be written. However, in some cases, repeating the same tests can have a beneficial outcome, e.g., in automated regression testing (see section 2.2.3).","Beware of pesticide paradox if test repeated over and over again, these tests will no longer find defects. Solution: create new test cases or do another testing types (eg. load test). But this can be useful for example regression testing. Running test cases over and over again make sure one module not affected by recent changes is one of the pesticide paradox example."]}],[{"i":"6-testing-is-context-dependent","l":"#6 Testing is context dependent.","p":["There is no single universally applicable approach to testing. Testing is done differently in different contexts (Kaner 2011)","testing is done differently in different contexts. Basically, dividing testing efforts between each projects based on scope, quality, risks, and budget. For example one projects need more time to tests and technique required, whereas the other project need less time to tests because we can ship an update."]}],[{"i":"7-absence-of-error-is-a-fallacy","l":"#7 Absence of Error is a fallacy","p":["It is a fallacy (i.e., a misconception) to expect that software verification will ensure the success of a system. Thoroughly testing all the specified requirements and fixing all the defects found could still produce a system that does not fulfill the users’ needs and expectations, that does not help in achieving the customer’s business goals, and that is inferior compared to other competing systems. In addition to verification, validation should also be carried out (Boehm 1981).","System that are perfectly tested and found no defects won't ensure the success of the system. For example the google plus. The developer has already delivered a great software, fixing every error and making sure the software is better than the competitor. But in reality, google plus is a big failure because they can't beat their competitor. Even though the software is in a best condition possible, it is not enough just to deliver perfectly working software."]}],[{"l":"Shopee"}],[{"l":"Tokopedia"}],[{"l":"Gojek"}],[{"l":"Grab"}],[{"l":"Maxim"}],[{"l":"DANA"}],[{"l":"Jago"}],[{"l":"OVO"}]]